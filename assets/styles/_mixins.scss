

// Generate correct logo height based on custom width

/*Logo Example: 
1: logo width
2: background-color (Optional - default $col-news);

.my-green-logo {
	@extend .bt-logo-flat;
	@include logo-width(20rem, green);
}*/

$logo-ratio: (70/214);



@mixin logo-width($logo-width: 15.88rem, $background-color: $col-news) {
	width: $logo-width;
	height: ($logo-width * $logo-ratio);
	background-color: $background-color;
	display: inline-block;
}


// Generate correct logo width based on custom height

/*Logo Example: 
1: logo height
2: background-color (Optional - default $col-news);

.my-small-logo {
	@extend .bt-logo-flat;
	@include logo-height(1rem);
}*/


@mixin logo-height($logo-height: 5rem, $background-color: $col-news) {
	height: $logo-height;
	width: ($logo-height / $logo-ratio);
	background-color: $background-color;
	display: inline-block;
}


// rem: Calculate the rem unit, and return both pixels and rems
// to support older (non-rem supporting) browsers
@mixin rem($property, $value, $context: $font-size-root) {
	#{$property}: $value;
	#{$property}: cr($value, $context);
}

// Since the most common application of this is likely to be 
// with font-size, I've created a special mixin just for that
// which will save you a whopping **5 characters** per time you
// have to type it. Productivity FTW!
@mixin font-size($font-size) {
	@include rem(font-size, $font-size);
}


// Functions

// calc-rem: calculate the rem value based on the desired pixel 
// value versus a context value, usually the default font size
$default-font-size: 16px !default;

@function calc-rem( $target, $context: $font-size-root ) {
	@return $target / $context * 1rem;
}

// Shorthand redeclaration of the above
@function cr( $target, $context: $default-font-size ) {
	@return calc-rem( $target, $context );
}